// Generated by Dagger (https://dagger.dev).
package ru.limeek.organizer.presentation.di.components;

import android.content.SharedPreferences;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import ru.limeek.organizer.data.daos.EventDao;
import ru.limeek.organizer.data.daos.LocationDao;
import ru.limeek.organizer.data.database.AppDatabase;
import ru.limeek.organizer.data.repository.EventRepository;
import ru.limeek.organizer.data.repository.EventRepository_Factory;
import ru.limeek.organizer.data.repository.LocationRepository;
import ru.limeek.organizer.data.repository.LocationRepository_Factory;
import ru.limeek.organizer.data.repository.SharedPrefsRepository;
import ru.limeek.organizer.data.repository.SharedPrefsRepository_Factory;
import ru.limeek.organizer.domain.usecases.DeleteEventUseCase;
import ru.limeek.organizer.domain.usecases.DeleteEventUseCase_Factory;
import ru.limeek.organizer.domain.usecases.DeleteLocationUseCase;
import ru.limeek.organizer.domain.usecases.DeleteLocationUseCase_Factory;
import ru.limeek.organizer.domain.usecases.GetEventsByCachedDateUseCase;
import ru.limeek.organizer.domain.usecases.GetEventsByCachedDateUseCase_Factory;
import ru.limeek.organizer.domain.usecases.GetUserCreatedLocationsUseCase;
import ru.limeek.organizer.domain.usecases.GetUserCreatedLocationsUseCase_Factory;
import ru.limeek.organizer.domain.usecases.InsertEventUseCase;
import ru.limeek.organizer.domain.usecases.InsertEventUseCase_Factory;
import ru.limeek.organizer.domain.usecases.InsertLocationUseCase;
import ru.limeek.organizer.domain.usecases.InsertLocationUseCase_Factory;
import ru.limeek.organizer.domain.usecases.UpdateEventUseCase;
import ru.limeek.organizer.domain.usecases.UpdateEventUseCase_Factory;
import ru.limeek.organizer.domain.usecases.UpdateLocationUseCase;
import ru.limeek.organizer.domain.usecases.UpdateLocationUseCase_Factory;
import ru.limeek.organizer.presentation.app.App;
import ru.limeek.organizer.presentation.di.modules.BuilderModule_CalendarFragmentModule;
import ru.limeek.organizer.presentation.di.modules.BuilderModule_EventDetailsFragmentInjector;
import ru.limeek.organizer.presentation.di.modules.BuilderModule_EventsFragmentModule;
import ru.limeek.organizer.presentation.di.modules.BuilderModule_LocationActivityInjector;
import ru.limeek.organizer.presentation.di.modules.BuilderModule_LocationDetailsActivityInjector;
import ru.limeek.organizer.presentation.di.modules.BuilderModule_MainActivityInjector;
import ru.limeek.organizer.presentation.di.modules.BuilderModule_MainFragmentInjector;
import ru.limeek.organizer.presentation.di.modules.RoomModule;
import ru.limeek.organizer.presentation.di.modules.RoomModule_ProvidesDbFactory;
import ru.limeek.organizer.presentation.di.modules.RoomModule_ProvidesEventDaoFactory;
import ru.limeek.organizer.presentation.di.modules.RoomModule_ProvidesLocationDaoFactory;
import ru.limeek.organizer.presentation.di.modules.SharedPreferencesModule;
import ru.limeek.organizer.presentation.di.modules.SharedPreferencesModule_ProvideSharedPreferencesFactory;
import ru.limeek.organizer.presentation.di.modules.fragments.CalendarFragmentModule;
import ru.limeek.organizer.presentation.di.modules.fragments.CalendarFragmentModule_ProvideCalendarViewModelFactory;
import ru.limeek.organizer.presentation.di.modules.fragments.EventDetailsFragmentModule;
import ru.limeek.organizer.presentation.di.modules.fragments.EventDetailsFragmentModule_ProvideEventDetailsViewModelFactory;
import ru.limeek.organizer.presentation.di.modules.fragments.EventsFragmentModule;
import ru.limeek.organizer.presentation.di.modules.fragments.EventsFragmentModule_ProvideEventsViewModelFactory;
import ru.limeek.organizer.presentation.di.modules.fragments.LocationDetailsFragmentModule;
import ru.limeek.organizer.presentation.di.modules.fragments.LocationDetailsFragmentModule_ProvideLocationDetailsViewModelFactory;
import ru.limeek.organizer.presentation.di.modules.fragments.LocationFragmentModule;
import ru.limeek.organizer.presentation.di.modules.fragments.LocationFragmentModule_ProvideLocationViewModelFactory;
import ru.limeek.organizer.presentation.di.modules.fragments.MainFragmentModule;
import ru.limeek.organizer.presentation.di.modules.fragments.MainFragmentModule_ProvideMainViewModelFactory;
import ru.limeek.organizer.presentation.viewmodels.CalendarViewModel;
import ru.limeek.organizer.presentation.viewmodels.EventDetailsViewModel;
import ru.limeek.organizer.presentation.viewmodels.EventsViewModel;
import ru.limeek.organizer.presentation.viewmodels.LocationDetailsViewModel;
import ru.limeek.organizer.presentation.viewmodels.LocationViewModel;
import ru.limeek.organizer.presentation.viewmodels.MainViewModel;
import ru.limeek.organizer.presentation.views.CalendarFragment;
import ru.limeek.organizer.presentation.views.CalendarFragment_MembersInjector;
import ru.limeek.organizer.presentation.views.EventDetailsFragment;
import ru.limeek.organizer.presentation.views.EventDetailsFragment_MembersInjector;
import ru.limeek.organizer.presentation.views.EventsFragment;
import ru.limeek.organizer.presentation.views.EventsFragment_MembersInjector;
import ru.limeek.organizer.presentation.views.LocationDetailsFragment;
import ru.limeek.organizer.presentation.views.LocationDetailsFragment_MembersInjector;
import ru.limeek.organizer.presentation.views.LocationFragment;
import ru.limeek.organizer.presentation.views.LocationFragment_MembersInjector;
import ru.limeek.organizer.presentation.views.MainActivity;
import ru.limeek.organizer.presentation.views.MainFragment;
import ru.limeek.organizer.presentation.views.MainFragment_MembersInjector;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<BuilderModule_MainActivityInjector.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<BuilderModule_LocationActivityInjector.LocationFragmentSubcomponent.Factory> locationFragmentSubcomponentFactoryProvider;

  private Provider<BuilderModule_LocationDetailsActivityInjector.LocationDetailsFragmentSubcomponent.Factory> locationDetailsFragmentSubcomponentFactoryProvider;

  private Provider<BuilderModule_EventsFragmentModule.EventsFragmentSubcomponent.Factory> eventsFragmentSubcomponentFactoryProvider;

  private Provider<BuilderModule_CalendarFragmentModule.CalendarFragmentSubcomponent.Factory> calendarFragmentSubcomponentFactoryProvider;

  private Provider<BuilderModule_MainFragmentInjector.MainFragmentSubcomponent.Factory> mainFragmentSubcomponentFactoryProvider;

  private Provider<BuilderModule_EventDetailsFragmentInjector.EventDetailsFragmentSubcomponent.Factory> eventDetailsFragmentSubcomponentFactoryProvider;

  private Provider<App> appProvider;

  private Provider<AppDatabase> providesDbProvider;

  private Provider<LocationDao> providesLocationDaoProvider;

  private Provider<EventDao> providesEventDaoProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private DaggerAppComponent(RoomModule roomModuleParam,
      SharedPreferencesModule sharedPreferencesModuleParam, App appParam) {

    initialize(roomModuleParam, sharedPreferencesModuleParam, appParam);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(7).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(LocationFragment.class, (Provider) locationFragmentSubcomponentFactoryProvider).put(LocationDetailsFragment.class, (Provider) locationDetailsFragmentSubcomponentFactoryProvider).put(EventsFragment.class, (Provider) eventsFragmentSubcomponentFactoryProvider).put(CalendarFragment.class, (Provider) calendarFragmentSubcomponentFactoryProvider).put(MainFragment.class, (Provider) mainFragmentSubcomponentFactoryProvider).put(EventDetailsFragment.class, (Provider) eventDetailsFragmentSubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final RoomModule roomModuleParam,
      final SharedPreferencesModule sharedPreferencesModuleParam, final App appParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<BuilderModule_MainActivityInjector.MainActivitySubcomponent.Factory>() {
      @Override
      public BuilderModule_MainActivityInjector.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.locationFragmentSubcomponentFactoryProvider = new Provider<BuilderModule_LocationActivityInjector.LocationFragmentSubcomponent.Factory>() {
      @Override
      public BuilderModule_LocationActivityInjector.LocationFragmentSubcomponent.Factory get() {
        return new LocationFragmentSubcomponentFactory();}
    };
    this.locationDetailsFragmentSubcomponentFactoryProvider = new Provider<BuilderModule_LocationDetailsActivityInjector.LocationDetailsFragmentSubcomponent.Factory>() {
      @Override
      public BuilderModule_LocationDetailsActivityInjector.LocationDetailsFragmentSubcomponent.Factory get(
          ) {
        return new LocationDetailsFragmentSubcomponentFactory();}
    };
    this.eventsFragmentSubcomponentFactoryProvider = new Provider<BuilderModule_EventsFragmentModule.EventsFragmentSubcomponent.Factory>() {
      @Override
      public BuilderModule_EventsFragmentModule.EventsFragmentSubcomponent.Factory get() {
        return new EventsFragmentSubcomponentFactory();}
    };
    this.calendarFragmentSubcomponentFactoryProvider = new Provider<BuilderModule_CalendarFragmentModule.CalendarFragmentSubcomponent.Factory>() {
      @Override
      public BuilderModule_CalendarFragmentModule.CalendarFragmentSubcomponent.Factory get() {
        return new CalendarFragmentSubcomponentFactory();}
    };
    this.mainFragmentSubcomponentFactoryProvider = new Provider<BuilderModule_MainFragmentInjector.MainFragmentSubcomponent.Factory>() {
      @Override
      public BuilderModule_MainFragmentInjector.MainFragmentSubcomponent.Factory get() {
        return new MainFragmentSubcomponentFactory();}
    };
    this.eventDetailsFragmentSubcomponentFactoryProvider = new Provider<BuilderModule_EventDetailsFragmentInjector.EventDetailsFragmentSubcomponent.Factory>() {
      @Override
      public BuilderModule_EventDetailsFragmentInjector.EventDetailsFragmentSubcomponent.Factory get(
          ) {
        return new EventDetailsFragmentSubcomponentFactory();}
    };
    this.appProvider = InstanceFactory.create(appParam);
    this.providesDbProvider = DoubleCheck.provider(RoomModule_ProvidesDbFactory.create(roomModuleParam, appProvider));
    this.providesLocationDaoProvider = DoubleCheck.provider(RoomModule_ProvidesLocationDaoFactory.create(roomModuleParam, providesDbProvider));
    this.providesEventDaoProvider = DoubleCheck.provider(RoomModule_ProvidesEventDaoFactory.create(roomModuleParam, providesDbProvider));
    this.provideSharedPreferencesProvider = DoubleCheck.provider(SharedPreferencesModule_ProvideSharedPreferencesFactory.create(sharedPreferencesModuleParam, appProvider));
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);}

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory extends AppComponent.Factory {
    @Override
    public AppComponent create(App app) {
      Preconditions.checkNotNull(app);
      return new DaggerAppComponent(new RoomModule(), new SharedPreferencesModule(), app);
    }
  }

  private final class MainActivitySubcomponentFactory implements BuilderModule_MainActivityInjector.MainActivitySubcomponent.Factory {
    @Override
    public BuilderModule_MainActivityInjector.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements BuilderModule_MainActivityInjector.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private final class LocationFragmentSubcomponentFactory implements BuilderModule_LocationActivityInjector.LocationFragmentSubcomponent.Factory {
    @Override
    public BuilderModule_LocationActivityInjector.LocationFragmentSubcomponent create(
        LocationFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LocationFragmentSubcomponentImpl(new LocationFragmentModule(), arg0);
    }
  }

  private final class LocationFragmentSubcomponentImpl implements BuilderModule_LocationActivityInjector.LocationFragmentSubcomponent {
    private Provider<LocationFragment> arg0Provider;

    private Provider<LocationRepository> locationRepositoryProvider;

    private Provider<GetUserCreatedLocationsUseCase> getUserCreatedLocationsUseCaseProvider;

    private Provider<LocationViewModel> provideLocationViewModelProvider;

    private LocationFragmentSubcomponentImpl(LocationFragmentModule locationFragmentModuleParam,
        LocationFragment arg0Param) {

      initialize(locationFragmentModuleParam, arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LocationFragmentModule locationFragmentModuleParam,
        final LocationFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.locationRepositoryProvider = LocationRepository_Factory.create(DaggerAppComponent.this.providesLocationDaoProvider, DaggerAppComponent.this.providesEventDaoProvider);
      this.getUserCreatedLocationsUseCaseProvider = GetUserCreatedLocationsUseCase_Factory.create(locationRepositoryProvider);
      this.provideLocationViewModelProvider = DoubleCheck.provider(LocationFragmentModule_ProvideLocationViewModelFactory.create(locationFragmentModuleParam, arg0Provider, getUserCreatedLocationsUseCaseProvider));
    }

    @Override
    public void inject(LocationFragment arg0) {
      injectLocationFragment(arg0);}

    private LocationFragment injectLocationFragment(LocationFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      LocationFragment_MembersInjector.injectViewModel(instance, provideLocationViewModelProvider.get());
      return instance;
    }
  }

  private final class LocationDetailsFragmentSubcomponentFactory implements BuilderModule_LocationDetailsActivityInjector.LocationDetailsFragmentSubcomponent.Factory {
    @Override
    public BuilderModule_LocationDetailsActivityInjector.LocationDetailsFragmentSubcomponent create(
        LocationDetailsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LocationDetailsFragmentSubcomponentImpl(new LocationDetailsFragmentModule(), arg0);
    }
  }

  private final class LocationDetailsFragmentSubcomponentImpl implements BuilderModule_LocationDetailsActivityInjector.LocationDetailsFragmentSubcomponent {
    private Provider<LocationDetailsFragment> arg0Provider;

    private Provider<LocationRepository> locationRepositoryProvider;

    private Provider<InsertLocationUseCase> insertLocationUseCaseProvider;

    private Provider<UpdateLocationUseCase> updateLocationUseCaseProvider;

    private Provider<EventRepository> eventRepositoryProvider;

    private Provider<DeleteLocationUseCase> deleteLocationUseCaseProvider;

    private Provider<LocationDetailsViewModel> provideLocationDetailsViewModelProvider;

    private LocationDetailsFragmentSubcomponentImpl(
        LocationDetailsFragmentModule locationDetailsFragmentModuleParam,
        LocationDetailsFragment arg0Param) {

      initialize(locationDetailsFragmentModuleParam, arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LocationDetailsFragmentModule locationDetailsFragmentModuleParam,
        final LocationDetailsFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.locationRepositoryProvider = LocationRepository_Factory.create(DaggerAppComponent.this.providesLocationDaoProvider, DaggerAppComponent.this.providesEventDaoProvider);
      this.insertLocationUseCaseProvider = InsertLocationUseCase_Factory.create(locationRepositoryProvider);
      this.updateLocationUseCaseProvider = UpdateLocationUseCase_Factory.create(locationRepositoryProvider);
      this.eventRepositoryProvider = EventRepository_Factory.create(DaggerAppComponent.this.providesEventDaoProvider, DaggerAppComponent.this.providesLocationDaoProvider);
      this.deleteLocationUseCaseProvider = DeleteLocationUseCase_Factory.create(locationRepositoryProvider, eventRepositoryProvider);
      this.provideLocationDetailsViewModelProvider = DoubleCheck.provider(LocationDetailsFragmentModule_ProvideLocationDetailsViewModelFactory.create(locationDetailsFragmentModuleParam, arg0Provider, insertLocationUseCaseProvider, updateLocationUseCaseProvider, deleteLocationUseCaseProvider));
    }

    @Override
    public void inject(LocationDetailsFragment arg0) {
      injectLocationDetailsFragment(arg0);}

    private LocationDetailsFragment injectLocationDetailsFragment(
        LocationDetailsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      LocationDetailsFragment_MembersInjector.injectViewModel(instance, provideLocationDetailsViewModelProvider.get());
      return instance;
    }
  }

  private final class EventsFragmentSubcomponentFactory implements BuilderModule_EventsFragmentModule.EventsFragmentSubcomponent.Factory {
    @Override
    public BuilderModule_EventsFragmentModule.EventsFragmentSubcomponent create(
        EventsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new EventsFragmentSubcomponentImpl(new EventsFragmentModule(), arg0);
    }
  }

  private final class EventsFragmentSubcomponentImpl implements BuilderModule_EventsFragmentModule.EventsFragmentSubcomponent {
    private Provider<EventsFragment> arg0Provider;

    private Provider<SharedPrefsRepository> sharedPrefsRepositoryProvider;

    private Provider<EventRepository> eventRepositoryProvider;

    private Provider<GetEventsByCachedDateUseCase> getEventsByCachedDateUseCaseProvider;

    private Provider<EventsViewModel> provideEventsViewModelProvider;

    private EventsFragmentSubcomponentImpl(EventsFragmentModule eventsFragmentModuleParam,
        EventsFragment arg0Param) {

      initialize(eventsFragmentModuleParam, arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EventsFragmentModule eventsFragmentModuleParam,
        final EventsFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.sharedPrefsRepositoryProvider = SharedPrefsRepository_Factory.create(DaggerAppComponent.this.provideSharedPreferencesProvider);
      this.eventRepositoryProvider = EventRepository_Factory.create(DaggerAppComponent.this.providesEventDaoProvider, DaggerAppComponent.this.providesLocationDaoProvider);
      this.getEventsByCachedDateUseCaseProvider = GetEventsByCachedDateUseCase_Factory.create(sharedPrefsRepositoryProvider, eventRepositoryProvider);
      this.provideEventsViewModelProvider = DoubleCheck.provider(EventsFragmentModule_ProvideEventsViewModelFactory.create(eventsFragmentModuleParam, arg0Provider, sharedPrefsRepositoryProvider, getEventsByCachedDateUseCaseProvider));
    }

    @Override
    public void inject(EventsFragment arg0) {
      injectEventsFragment(arg0);}

    private EventsFragment injectEventsFragment(EventsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      EventsFragment_MembersInjector.injectViewModel(instance, provideEventsViewModelProvider.get());
      return instance;
    }
  }

  private final class CalendarFragmentSubcomponentFactory implements BuilderModule_CalendarFragmentModule.CalendarFragmentSubcomponent.Factory {
    @Override
    public BuilderModule_CalendarFragmentModule.CalendarFragmentSubcomponent create(
        CalendarFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new CalendarFragmentSubcomponentImpl(new CalendarFragmentModule(), arg0);
    }
  }

  private final class CalendarFragmentSubcomponentImpl implements BuilderModule_CalendarFragmentModule.CalendarFragmentSubcomponent {
    private Provider<CalendarFragment> arg0Provider;

    private Provider<SharedPrefsRepository> sharedPrefsRepositoryProvider;

    private Provider<CalendarViewModel> provideCalendarViewModelProvider;

    private CalendarFragmentSubcomponentImpl(CalendarFragmentModule calendarFragmentModuleParam,
        CalendarFragment arg0Param) {

      initialize(calendarFragmentModuleParam, arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CalendarFragmentModule calendarFragmentModuleParam,
        final CalendarFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.sharedPrefsRepositoryProvider = SharedPrefsRepository_Factory.create(DaggerAppComponent.this.provideSharedPreferencesProvider);
      this.provideCalendarViewModelProvider = DoubleCheck.provider(CalendarFragmentModule_ProvideCalendarViewModelFactory.create(calendarFragmentModuleParam, arg0Provider, sharedPrefsRepositoryProvider));
    }

    @Override
    public void inject(CalendarFragment arg0) {
      injectCalendarFragment(arg0);}

    private CalendarFragment injectCalendarFragment(CalendarFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      CalendarFragment_MembersInjector.injectViewModel(instance, provideCalendarViewModelProvider.get());
      return instance;
    }
  }

  private final class MainFragmentSubcomponentFactory implements BuilderModule_MainFragmentInjector.MainFragmentSubcomponent.Factory {
    @Override
    public BuilderModule_MainFragmentInjector.MainFragmentSubcomponent create(MainFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainFragmentSubcomponentImpl(new MainFragmentModule(), arg0);
    }
  }

  private final class MainFragmentSubcomponentImpl implements BuilderModule_MainFragmentInjector.MainFragmentSubcomponent {
    private Provider<MainFragment> arg0Provider;

    private Provider<MainViewModel> provideMainViewModelProvider;

    private MainFragmentSubcomponentImpl(MainFragmentModule mainFragmentModuleParam,
        MainFragment arg0Param) {

      initialize(mainFragmentModuleParam, arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainFragmentModule mainFragmentModuleParam,
        final MainFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.provideMainViewModelProvider = DoubleCheck.provider(MainFragmentModule_ProvideMainViewModelFactory.create(mainFragmentModuleParam, arg0Provider));
    }

    @Override
    public void inject(MainFragment arg0) {
      injectMainFragment(arg0);}

    private MainFragment injectMainFragment(MainFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      MainFragment_MembersInjector.injectViewModel(instance, provideMainViewModelProvider.get());
      return instance;
    }
  }

  private final class EventDetailsFragmentSubcomponentFactory implements BuilderModule_EventDetailsFragmentInjector.EventDetailsFragmentSubcomponent.Factory {
    @Override
    public BuilderModule_EventDetailsFragmentInjector.EventDetailsFragmentSubcomponent create(
        EventDetailsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new EventDetailsFragmentSubcomponentImpl(new EventDetailsFragmentModule(), arg0);
    }
  }

  private final class EventDetailsFragmentSubcomponentImpl implements BuilderModule_EventDetailsFragmentInjector.EventDetailsFragmentSubcomponent {
    private Provider<EventDetailsFragment> arg0Provider;

    private Provider<SharedPrefsRepository> sharedPrefsRepositoryProvider;

    private Provider<EventRepository> eventRepositoryProvider;

    private Provider<InsertEventUseCase> insertEventUseCaseProvider;

    private Provider<UpdateEventUseCase> updateEventUseCaseProvider;

    private Provider<LocationRepository> locationRepositoryProvider;

    private Provider<DeleteEventUseCase> deleteEventUseCaseProvider;

    private Provider<GetUserCreatedLocationsUseCase> getUserCreatedLocationsUseCaseProvider;

    private Provider<EventDetailsViewModel> provideEventDetailsViewModelProvider;

    private EventDetailsFragmentSubcomponentImpl(
        EventDetailsFragmentModule eventDetailsFragmentModuleParam,
        EventDetailsFragment arg0Param) {

      initialize(eventDetailsFragmentModuleParam, arg0Param);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EventDetailsFragmentModule eventDetailsFragmentModuleParam,
        final EventDetailsFragment arg0Param) {
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.sharedPrefsRepositoryProvider = SharedPrefsRepository_Factory.create(DaggerAppComponent.this.provideSharedPreferencesProvider);
      this.eventRepositoryProvider = EventRepository_Factory.create(DaggerAppComponent.this.providesEventDaoProvider, DaggerAppComponent.this.providesLocationDaoProvider);
      this.insertEventUseCaseProvider = InsertEventUseCase_Factory.create(eventRepositoryProvider);
      this.updateEventUseCaseProvider = UpdateEventUseCase_Factory.create(eventRepositoryProvider);
      this.locationRepositoryProvider = LocationRepository_Factory.create(DaggerAppComponent.this.providesLocationDaoProvider, DaggerAppComponent.this.providesEventDaoProvider);
      this.deleteEventUseCaseProvider = DeleteEventUseCase_Factory.create(eventRepositoryProvider, locationRepositoryProvider);
      this.getUserCreatedLocationsUseCaseProvider = GetUserCreatedLocationsUseCase_Factory.create(locationRepositoryProvider);
      this.provideEventDetailsViewModelProvider = DoubleCheck.provider(EventDetailsFragmentModule_ProvideEventDetailsViewModelFactory.create(eventDetailsFragmentModuleParam, arg0Provider, sharedPrefsRepositoryProvider, insertEventUseCaseProvider, updateEventUseCaseProvider, deleteEventUseCaseProvider, getUserCreatedLocationsUseCaseProvider));
    }

    @Override
    public void inject(EventDetailsFragment arg0) {
      injectEventDetailsFragment(arg0);}

    private EventDetailsFragment injectEventDetailsFragment(EventDetailsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      EventDetailsFragment_MembersInjector.injectViewModel(instance, provideEventDetailsViewModelProvider.get());
      return instance;
    }
  }
}
